using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.IO;

namespace SharpGif.Tests
{
    [TestClass]
    public class Decoding
    {
        private static byte[] animFile = new byte[]
        {
            0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x0B, 0x00, 0x1D, 0x00, 0xA2, 0x05, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x8E, 0x8E, 0x8E, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0xFF, 0x0B, 0x4E, 0x45, 0x54, 0x53, 0x43, 0x41, 0x50, 0x45, 0x32, 0x2E, 0x30, 0x03, 0x01, 0x00, 0x00, 0x00, 0x21, 0xF9, 0x04, 0x04, 0x64, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x1D, 0x00, 0x00, 0x03, 0x30, 0x48, 0xBA, 0xDC, 0xDE, 0x23, 0xBE, 0x48, 0x21, 0xAD, 0xEB, 0x62, 0xA5, 0x25, 0xD3, 0x93, 0xF7, 0x8C, 0xE4, 0x27, 0x9A, 0x1B, 0xD7, 0xA1, 0x17, 0x9B, 0x1E, 0xA0, 0xF3, 0x96, 0x34, 0x13, 0xDC, 0xCF, 0xAD, 0x37, 0x7A, 0x6F, 0xF7, 0xB8, 0x05, 0x30, 0x28, 0xF4, 0x39, 0x76, 0xB5, 0x64, 0x02, 0x00, 0x21, 0xF9, 0x04, 0x04, 0x32, 0x00, 0x00, 0x00, 0x2C, 0x02, 0x00, 0x0B, 0x00, 0x07, 0x00, 0x10, 0x00, 0x00, 0x03, 0x19, 0x78, 0x27, 0xAC, 0xCB, 0x0D, 0xCA, 0x49, 0xE1, 0xB3, 0x0A, 0xBB, 0xCD, 0xF7, 0xF8, 0xCE, 0x27, 0x1E, 0x62, 0x69, 0x9E, 0xA3, 0x19, 0x82, 0x47, 0x02, 0x00, 0x21, 0xF9, 0x04, 0x04, 0x64, 0x00, 0x00, 0x00, 0x2C, 0x02, 0x00, 0x02, 0x00, 0x07, 0x00, 0x10, 0x00, 0x00, 0x03, 0x19, 0x78, 0x07, 0xAC, 0xCB, 0x0D, 0xCA, 0x49, 0xE1, 0xB3, 0x0A, 0xBB, 0xCD, 0xF7, 0xF8, 0xCE, 0x27, 0x1E, 0x62, 0x69, 0x9E, 0xA3, 0x19, 0x82, 0x45, 0x02, 0x00, 0x3B
        };

        private static byte[] file = new byte[]
                {
            0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x0A, 0x00, 0x0A, 0x00, 0x91, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x21, 0xF9, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x00, 0x02, 0x16, 0x8C, 0x2D, 0x99, 0x87, 0x2A, 0x1C, 0xDC, 0x33, 0xA0, 0x02, 0x75, 0xEC, 0x95, 0xFA, 0xA8, 0xDE, 0x60, 0x8C, 0x04, 0x91, 0x4C, 0x01, 0x00, 0x3B
        };

        [TestMethod]
        public void DecodesAnimatedFile()
        {
            var ms = new MemoryStream(animFile);
            var gif = new Gif(ms);
        }

        [TestMethod]
        public void DecodesFile()
        {
            var ms = new MemoryStream(file);
            var gif = new Gif(ms);
        }

        [TestMethod]
        public void EncodesAnimatedFile()
        {
            var ms = new MemoryStream(animFile);
            var gif = new Gif(ms);

            var ms2 = new MemoryStream();
            gif.WriteToStream(ms2);

            var bytes = ms2.ToArray();
            Assert.AreEqual(animFile.Length, bytes.Length);
            for (var i = 0; i < ms.Length; ++i)
                Assert.AreEqual(animFile[i], bytes[i]);
        }

        [TestMethod]
        public void EncodesFile()
        {
            var ms = new MemoryStream(file);
            var gif = new Gif(ms);

            var ms2 = new MemoryStream();
            gif.WriteToStream(ms2);

            var bytes = ms2.ToArray();
            Assert.AreEqual(file.Length, bytes.Length);
            for (var i = 0; i < ms.Length; ++i)
                Assert.AreEqual(file[i], bytes[i]);
        }
    }
}